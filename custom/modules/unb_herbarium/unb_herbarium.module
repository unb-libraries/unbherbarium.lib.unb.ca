<?php

/**
 * @file
 * Contains unb_herbarium.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_help().
 */
function unb_herbarium_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the UNB Herbarium.
    case 'help.page.unb_herbarium':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('UNB Herbarium Features') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function unb_herbarium_theme_registry_alter(&$theme_registry) {
  $theme_registry['taxonomy_term']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
  $theme_registry['views_exposed_form']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
  $theme_registry['page_title']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
}

/**
 * Implements hook_theme().
 */
function unb_herbarium_theme($existing, $type, $theme, $path) {
  $variables = array(
    'node__herbarium_specimen' => array(
      'arguments' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ),
      'template' => 'node--herbarium-specimen',
      'path' => drupal_get_path('module', 'unb_herbarium') . '/templates',
      'base hook' => 'node__herbarium_specimen',
    ),
  );
  return $variables;
}

/**
 * Implements hook_preprocess_hook().
 */
function unb_herbarium_preprocess_node__herbarium_specimen(&$variables) {
  $node = $variables['elements']['#node'];

  $assigned_tax_term_list = $node->get('field_taxonomy_tid');
  $variables['specimen_assigned_taxon'] = $assigned_tax_term_list->view();

  $specific_epithet = $assigned_tax_term_list
    ->get(0)
    ->entity;

  $tid = $specific_epithet->id();
  $genus_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Genus');
  $family_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Family');

  // Split date into separate year/month/day fields for full details mode.
  $collection_date = $node->get('field_dwc_eventdate')->getString();
  if ($collection_date) {
    $date = new DateTime($collection_date);
    $variables['collection_date_year'] = $date->format('Y');
    $variables['collection_date_month'] = $date->format('m');
    $variables['collection_date_day'] = $date->format('d');
  }

  $variables['specimen_full_name'] = $specific_epithet
    ->get('field_cmh_full_specimen_name')
    ->view();

  $variables['specimen_family'] = _unb_herbarium_get_tax_term_link($family_term);
  $variables['specimen_genus'] = _unb_herbarium_get_tax_term_link($genus_term);

  $variables['specimen_authority'] = $specific_epithet
    ->get('field_dwc_scientificnameauthor')
    ->view();

  $variables['specimen_taxon_rank'] = $specific_epithet
    ->get('field_dwc_taxonrank')
    ->view();

  $variables['specimen_measurement_type'] = $specific_epithet
    ->get('field_dwc_measurementtype')
    ->view();

  $variables['specimen_measurement_value'] = $specific_epithet
    ->get('field_dwc_measurementvalue')
    ->view();

  $specimen_measurement_id = $specific_epithet
    ->get('field_dwc_measurementid')
    ->view();
  $variables['specimen_measurement_id'] = $specimen_measurement_id;
  $measurement_id_text_value = $specimen_measurement_id['0']['#text'];
  if (filter_var($measurement_id_text_value, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)) {
    $variables['specimen_measurement_id_url'] = '<a href="' . $measurement_id_text_value . '">' . $measurement_id_text_value . '</a>';
  }
  else {
    $variables['specimen_measurement_id_url'] = NULL;
  }

  $variables['specimen_en_common_names'] = $specific_epithet
    ->get('field_cmh_english_common_names')
    ->view();

  $variables['specimen_fr_common_names'] = $specific_epithet
    ->get('field_cmh_french_common_names')
    ->view();

  $variables['specimen_synonyms'] = $specific_epithet
    ->get('field_synonyms')
    ->view();

  $variables['specimen_taxon_remarks'] = $specific_epithet
    ->get('field_dwc_taxonremarks')
    ->view();

  $variables['specimen_infraspecific_epithet'] = $specific_epithet
    ->get('field_cmh_infraspecific_specimen')
    ->view();
}

/**
 * Implements hook_preprocess_page_title().
 */
function unb_herbarium_preprocess_page_title(&$variables) {
  // Load the node entity from current route.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node->bundle() === 'herbarium_specimen') {
      $full_title = $node
        ->get('field_taxonomy_tid')
        ->get(0)
        ->entity
        ->get('field_cmh_full_specimen_name')
        ->view();
      // Get field value using Twig Field Value module logic.
      if (isset($full_title['#items'])) {
        $element = $full_title['#items'];
        $items = [];
        $delta = 0;

        while (!empty($element[$delta])) {
          $items[$delta] = $full_title[$delta];
          $delta++;
        }
        // Use formatted 'full specimen name' for Herbarium Specimen node title.
        $variables['title'] = $items;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function unb_herbarium_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-unb-search-page') {
    // Add HTML5 placeholder to Views|UNB Search|Exposed form.
    $form['query']['#attributes']['placeholder'] = t('Enter sample term');
  }
}

/**
 * Returns raw html of linked taxonomy term name for given tid.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 *
 * @return string
 *   The HTML link to the taxonomy term.
 */
function _unb_herbarium_get_tax_term_link(TermInterface $term) {
  $name = $term->getName();
  $href = $term->url();
  return "<a href=\"$href\">$name</a>";
}

/**
 * Unsets herbarium specimen's geo location related content fields.
 *
 * @param array $variables
 *   The variables array containing the content fields to unpublish.
 *
 */
function _unb_herbarium_restrict_display(&$variables) {
  // Remove classified geo location info.
  unset($variables['content']['field_dwc_decimallatitude']);
  unset($variables['content']['field_dwc_decimallongitude']);
  unset($variables['content']['field_geoheritage']);
  unset($variables['content']['field_dwc_verbatimlocality']);
  unset($variables['content']['field_gmap']);
}
