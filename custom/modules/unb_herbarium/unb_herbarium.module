<?php

/**
 * @file
 * Contains unb_herbarium.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function unb_herbarium_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the UNB Herbarium.
    case 'help.page.unb_herbarium':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('UNB Herbarium Features') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function unb_herbarium_theme_registry_alter(&$theme_registry) {
  $theme_registry['taxonomy_term']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
  $theme_registry['page_title']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
}

/**
 * Implements hook_theme().
 */
function unb_herbarium_theme($existing, $type, $theme, $path) {
  $variables = [
    'node__herbarium_specimen' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--herbarium-specimen',
      'path' => drupal_get_path('module', 'unb_herbarium') . '/templates',
      'base hook' => 'node__herbarium_specimen',
    ],
  ];
  return $variables;
}

/**
 * Implements hook_preprocess_hook().
 */
function unb_herbarium_preprocess_node__herbarium_specimen(&$variables) {
  $node = $variables['elements']['#node'];

  $assigned_tax_term_list = $node->get('field_taxonomy_tid');
  $variables['specimen_assigned_taxon'] = $assigned_tax_term_list->view();

  $assigned_taxon = $assigned_tax_term_list
    ->get(0)
    ->entity;

  $tid = $assigned_taxon->id();
  $family_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Family');
  $genus_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Genus');
  $specific_epithet = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Species');

  $variables['specimen_full_name'] = $assigned_taxon
    ->get('field_cmh_full_specimen_name')
    ->view();

  $variables['specimen_family'] = _unb_herbarium_get_tax_term_link($family_term);
  $variables['specimen_genus'] = _unb_herbarium_get_tax_term_link($genus_term);

  // Only get link if specific epithet exists, eg. not 'sect'.
  if ($specific_epithet) {
    $variables['specimen_specific_epithet'] = _unb_herbarium_get_tax_term_link($specific_epithet);
  }
  $variables['specimen_authority'] = $assigned_taxon
    ->get('field_dwc_scientificnameauthor')
    ->view();

  $variables['specimen_taxon_rank'] = $assigned_taxon
    ->get('field_dwc_taxonrank')
    ->view();

  $variables['specimen_measurement_type'] = $assigned_taxon
    ->get('field_dwc_measurementtype')
    ->view();

  // Split date into separate year/month/day fields for full details mode.
  $collection_date = $node
    ->get('field_dwc_eventdate')
    ->getString();
  if ($collection_date) {
    $date = new DateTime($collection_date);
    $variables['collection_date_year'] = $date->format('Y');
    $variables['collection_date_month'] = $date->format('m');
    $variables['collection_date_day'] = $date->format('d');
  }

  if (_unb_herbarium_endangered_species($tid)) {
    if (_unb_herbarium_permit_private()) {
      $variables['view_endangered'] = TRUE;
    }
    else {
      $variables['view_endangered'] = FALSE;
      _unb_herbarium_unpublish_location_info($variables);
    }
  }
  else {
    $variables['view_endangered'] = TRUE;
  }
  $variables['specimen_measurement_value'] = $assigned_taxon
    ->get('field_dwc_measurementvalue')
    ->view();
  $specimen_measurement_id = $assigned_taxon
    ->get('field_dwc_measurementid')
    ->view();
  $variables['specimen_measurement_id'] = $specimen_measurement_id;
  $measurement_id_text_value = $assigned_taxon
    ->get('field_dwc_measurementid')
    ->getString();
  if (filter_var($measurement_id_text_value, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)) {
    $variables['specimen_measurement_id_url'] = '<a href="' . $measurement_id_text_value . '">' . $measurement_id_text_value . '</a>';
  }
  else {
    $variables['specimen_measurement_id_url'] = NULL;
  }

  $variables['specimen_en_common_names'] = $assigned_taxon
    ->get('field_cmh_english_common_names')
    ->view();

  $variables['specimen_fr_common_names'] = $assigned_taxon
    ->get('field_cmh_french_common_names')
    ->view();

  $variables['specimen_synonyms'] = $assigned_taxon
    ->get('field_synonyms')
    ->view();

  $variables['specimen_taxon_remarks'] = $assigned_taxon
    ->get('field_dwc_taxonremarks')
    ->view();

  $variables['specimen_infraspecific_epithet'] = $assigned_taxon
    ->get('field_cmh_infraspecific_specimen')
    ->view();

}

/**
 * Implements hook_preprocess_page_title().
 */
function unb_herbarium_preprocess_page_title(&$variables) {
  // Load the node entity from current route.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_object($node) && $node->bundle() === 'herbarium_specimen') {
      $full_title = $node
        ->get('field_taxonomy_tid')
        ->get(0)
        ->entity
        ->get('field_cmh_full_specimen_name')
        ->view();

      // Get field value using Twig Field Value module logic.
      if (isset($full_title['#items'])) {
        $element = $full_title['#items'];
        $items = [];
        $delta = 0;

        while (!empty($element[$delta])) {
          $items[$delta] = $full_title[$delta];
          $delta++;
        }
        // Use formatted 'full specimen name' for Herbarium Specimen node title.
        $variables['title'] = $items;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function unb_herbarium_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-unb-search-page') {
    // Add HTML5 placeholder to Views|UNB Search|Exposed form.
    $form['query']['#attributes']['placeholder'] = t('Search') . ' ...';
  }
}

/**
 * Implements hook_views_pre_render().
 */
function unb_herbarium_views_pre_render(ViewExecutable $view) {
  if (($view->id() == 'browse' ||
      $view->id() == 'collector_specimen_list' ||
      $view->id() == 'taxon_rank_list'
    ) && $view->current_display == 'page'
  ) {
    foreach ($view->result as $value) {
      $tid = $value
        ->_relationship_entities['field_taxonomy_tid']
        ->id();

      $thumbnail = $value
        ->_entity
        ->get('field_large_sample_surrogate');

      if (!$thumbnail->isEmpty() &&
           _unb_herbarium_endangered_species($tid) &&
           !_unb_herbarium_permit_private()
      ) {
        // Force unmasked image field to use 'No Results' value.
        $thumbnail->setValue([]);
      }
    }
  }
  elseif ($view->id() == 'unb_search' && $view->current_display == 'page') {
    foreach ($view->result as $value) {

      if (
        !empty($value->relationship_objects['field_taxonomy_tid']['0'])
      ) {
        $tid = $value
          ->_relationship_objects['field_taxonomy_tid']['0']
          ->getString();
      }

      $thumbnail = $value
        ->_object
        ->get('field_large_sample_surrogate');

      if (!$thumbnail->isEmpty() &&
        _unb_herbarium_endangered_species($tid) &&
        !_unb_herbarium_permit_private()
      ) {
        // Force unmasked image field to use 'No Results' value.
        $thumbnail->setValue([]);
      }
    }
  }
}

/**
 * Returns raw html of linked taxonomy term name for given tid.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 *
 * @return string
 *   The HTML link to the taxonomy term.
 */
function _unb_herbarium_get_tax_term_link(TermInterface $term) {
  $name = $term->getName();
  $href = $term->url();
  return "<a href=\"$href\">$name</a>";
}

/**
 * Unsets herbarium specimen content fields with geo location information.
 *
 * @param array $variables
 *   The variables array containing the sensitive fields to hide.
 */
function _unb_herbarium_unpublish_location_info(array &$variables) {
  // Hide sensitive location information for endangered species.
  unset($variables['content']['field_dwc_decimallatitude']);
  unset($variables['content']['field_dwc_decimallongitude']);
  unset($variables['content']['field_geoheritage']);
  unset($variables['content']['field_dwc_verbatimlocality']);
  unset($variables['content']['field_gmap']);
}

/**
 * Returns whether or not a given species term id is considered endangered.
 *
 * @param int $tid
 *   The species term id.
 *
 * @return bool
 *   True if species is endangered, false otherwise.
 */
function _unb_herbarium_endangered_species($tid) {
  $term = Term::load($tid);

  if (empty($term)) {
    return FALSE;
  }

  $sRank = $term
    ->get('field_dwc_measurementvalue')
    ->getString();

  // Rarity values containing 'S1' or 'S2' are endangered.
  $endangered = "/[sS][12](?!\d)/";
  if (preg_match($endangered, $sRank)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Returns whether or not a user may access the private filesystem.
 *
 * @return bool
 *   True if user has specimen private file permission, false otherwise.
 */
function _unb_herbarium_permit_private() {
  $user = \Drupal::currentUser();
  if ($user->hasPermission('view private files')) {
    return TRUE;
  }

  return FALSE;
}
