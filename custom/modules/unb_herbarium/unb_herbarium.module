<?php

/**
 * @file
 * Contains unb_herbarium.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_help().
 */
function unb_herbarium_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the UNB Herbarium.
    case 'help.page.unb_herbarium':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('UNB Herbarium Features') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function unb_herbarium_theme_registry_alter(&$theme_registry) {
  $theme_registry['taxonomy_term']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
  $theme_registry['page_title']['path'] = drupal_get_path('module', 'unb_herbarium') . '/templates';
}

/**
 * Implements hook_theme().
 */
function unb_herbarium_theme($existing, $type, $theme, $path) {
  $variables = [
    'node__herbarium_specimen' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--herbarium-specimen',
      'path' => drupal_get_path('module', 'unb_herbarium') . '/templates',
      'base hook' => 'node__herbarium_specimen',
    ],
  ];
  return $variables;
}

/**
 * Implements hook_preprocess_hook().
 */
function unb_herbarium_preprocess_node__herbarium_specimen(&$variables) {
  $node = $variables['elements']['#node'];

  $assigned_tax_term_list = $node->get('field_taxonomy_tid');
  $variables['specimen_assigned_taxon'] = $assigned_tax_term_list->view();

  $assigned_taxon = $assigned_tax_term_list
    ->get(0)
    ->entity;

  $tid = $assigned_taxon->id();
  $family_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Family');
  $genus_term = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Genus');
  $specific_epithet = _herbarium_core_term_get_ancestor_rank(Term::load($tid), 'Species');

  $variables['specimen_full_name'] = $assigned_taxon
    ->get('field_cmh_full_specimen_name')
    ->view();

  $variables['specimen_family'] = _unb_herbarium_get_tax_term_link($family_term);
  $variables['specimen_genus'] = _unb_herbarium_get_tax_term_link($genus_term);

  // Only get link if specific epithet exists, eg. not 'sect'.
  if ($specific_epithet) {
    $variables['specimen_specific_epithet'] = _unb_herbarium_get_tax_term_link($specific_epithet);
  }
  $variables['specimen_authority'] = $assigned_taxon
    ->get('field_dwc_scientificnameauthor')
    ->view();

  $variables['specimen_taxon_rank'] = $assigned_taxon
    ->get('field_dwc_taxonrank')
    ->view();

  $variables['specimen_measurement_type'] = $assigned_taxon
    ->get('field_dwc_measurementtype')
    ->view();

  // Split date into separate year/month/day fields for full details mode.
  $collection_date = $node
    ->get('field_dwc_eventdate')
    ->getString();
  if ($collection_date) {
    $date = new DateTime($collection_date);
    $variables['collection_date_year'] = $date->format('Y');
    $variables['collection_date_month'] = $date->format('m');
    $variables['collection_date_day'] = $date->format('d');
  }

  $variables['specimen_measurement_value'] = $assigned_taxon
    ->get('field_dwc_measurementvalue')
    ->view();
  $specimen_measurement_id = $assigned_taxon
    ->get('field_dwc_measurementid')
    ->view();
  $variables['specimen_measurement_id'] = $specimen_measurement_id;
  $measurement_id_text_value = $assigned_taxon
    ->get('field_dwc_measurementid')
    ->getString();
  if (filter_var($measurement_id_text_value, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)) {
    $variables['specimen_measurement_id_url'] = '<a href="' . $measurement_id_text_value . '">' . $measurement_id_text_value . '</a>';
  }
  else {
    $variables['specimen_measurement_id_url'] = NULL;
  }

  $variables['specimen_en_common_names'] = $assigned_taxon
    ->get('field_cmh_english_common_names')
    ->view();

  $variables['specimen_fr_common_names'] = $assigned_taxon
    ->get('field_cmh_french_common_names')
    ->view();

  $variables['specimen_synonyms'] = $assigned_taxon
    ->get('field_synonyms')
    ->view();

  $variables['specimen_taxon_remarks'] = $assigned_taxon
    ->get('field_dwc_taxonremarks')
    ->view();

  $variables['specimen_infraspecific_epithet'] = $assigned_taxon
    ->get('field_cmh_infraspecific_specimen')
    ->view();

  // Link specimen image to original size or, if available, high res tiles.
  $specimen_image = NULL;
  $access_manager = \Drupal::service('access_manager');
  $access_hires = $access_manager->checkNamedRoute('herbarium_specimen.inspect_specimen', ['node' => $node->id()], \Drupal::currentUser());

  if (isset($variables['elements']['field_large_sample_surrogate'][0])) {
    $specimen_image = $variables['elements']['field_large_sample_surrogate'][0];
  }

  if ($specimen_image) {
    $specimen_image['#prefix'] = '<figure class="specimen-image">';
    $specimen_image['#suffix'] = '<figcaption class="description">';
    $download_url = $specimen_image['#url']->toString();
    if ($access_hires) {
      // Override image link destination: High Resolution Image route.
      $specimen_image['#url'] = Url::fromRoute(
        'herbarium_specimen.inspect_specimen', [
          'node' => $node->id(),
        ]
      );
      $inspect_url = $specimen_image['#url']->toString();
      $specimen_image['#suffix'] .= '<a href="' .
        $inspect_url .
        '"><i class="glyphicon glyphicon-eye-open"></i>' .
        t('View high resolution image') .
        '</a>';
    }
    else {
      $specimen_image['#suffix'] .= '<a href="' .
        $download_url .
        '"><i class="glyphicon glyphicon-fullscreen"></i>' .
        t('View full size image') .
        '</a>';
    }
    // Add 'download' text link to figure caption.
    $specimen_image['#suffix'] .=
      '<a class="download-link" href="' .
      $download_url .
      '" download="unbherbarium-' .
      $node
        ->get('field_dwc_record_number')
        ->getString() .
      '"><i class="glyphicon glyphicon-download-alt"></i>' .
      t('Download full size image') .
      '</a>';

    $specimen_image['#suffix'] .= '</figcaption></figure>';
    $variables['specimen_image'] = $specimen_image;
  }

}

/**
 * Implements hook_preprocess_page_title().
 */
function unb_herbarium_preprocess_page_title(&$variables) {
  // Load the node entity from current route.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_object($node) && $node->bundle() === 'herbarium_specimen') {
      $full_title = $node
        ->get('field_taxonomy_tid')
        ->get(0)
        ->entity
        ->get('field_cmh_full_specimen_name')
        ->view();

      // Get field value using Twig Field Value module logic.
      if (isset($full_title['#items'])) {
        $element = $full_title['#items'];
        $items = [];
        $delta = 0;

        while (!empty($element[$delta])) {
          $items[$delta] = $full_title[$delta];
          $delta++;
        }
        // Use formatted 'full specimen name' for Herbarium Specimen node title.
        $variables['title'] = $items;
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_hook().
 */
function unb_herbarium_preprocess_views_view_field__field_collector_tid(&$variables) {
  // Display links to taxonomy authors as a view.
  $node = Node::load($variables['row']->nid);

  $render_array = [
    '#theme' => 'item_list',
    '#list_type' => 'ul',
    '#items' => [],
  ];

  if (!empty($node->get('field_collector_tid'))) {
    foreach ($node->get('field_collector_tid') as $collector) {
      $collectors_id = $collector->entity->id();
      $render_item = [
        '#markup' => Link::fromTextAndUrl(
          $collector->entity->getName(),
          Url::fromUri("internal:/specimen/search?&collector=$collectors_id")
        )->toString(),
      ];
      $render_array['#items'][] = $render_item;
    }
  }

  $variables['output'] = $render_array;
}

/**
 * Returns raw html of linked taxonomy term name for given tid.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 *
 * @return string
 *   The HTML link to the taxonomy term.
 */
function _unb_herbarium_get_tax_term_link(TermInterface $term) {
  $name = $term->getName();
  $href = $term->url();
  return "<a href=\"$href\">$name</a>";
}
