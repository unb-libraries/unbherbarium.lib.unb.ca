<?php

/**
 * @file
 * Contains herbarium_core.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;

define('HERBARIUM_CORE_SPECIMEN_VOCABULARY_AUTH_FIELD', 'field_dwc_scientificnameauthor');
define('HERBARIUM_CORE_SPECIMEN_VOCABULARY_FULL_NAME_FIELD', 'field_cmh_full_specimen_name');
define('HERBARIUM_CORE_SPECIMEN_VOCABULARY_ID', 'herbarium_specimen_taxonomy');
define('HERBARIUM_CORE_SPECIMEN_VOCABULARY_INFRASPECIFIC_EPITHET_FIELD', 'field_cmh_infraspecific_specimen');
define('HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD', 'field_dwc_taxonrank');
define(
  'HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_LABELS_TO_PRINT',
  [
    'sect.',
    'ssp.',
    'var.',
    'x',
  ]
);
define(
  'HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_PRINTING',
  [
    'Family',
  ]
);
define(
  'HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_INFRASPECIFIC',
  [
    'Family',
    'Genus',
    'Species',
  ]
);

/**
 * Implements hook_help().
 */
function herbarium_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the herbarium_core module.
    case 'help.page.herbarium_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Herbarium Core Functions') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function herbarium_core_taxonomy_term_presave(TermInterface $term) {
  if ($term->getVocabularyId() == HERBARIUM_CORE_SPECIMEN_VOCABULARY_ID) {
    // Populate the full name field.
    $term->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_FULL_NAME_FIELD)->setValue(
      _herbarium_core_term_build_full_name($term, HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_PRINTING)
    );
    $term->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_FULL_NAME_FIELD)->format = 'full_html';

    // Populate the infraspecific species name.
    $term->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_INFRASPECIFIC_EPITHET_FIELD)->setValue(
      _herbarium_core_term_build_infraspecific_name($term)
    );
    $term->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_INFRASPECIFIC_EPITHET_FIELD)->format = 'full_html';

    // Trigger the presave hook for all next generation children.
    $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
    /* @var $storage \Drupal\taxonomy\TermStorageInterface */
    $child_terms = $storage->loadChildren($term->id());

    if (!empty($child_terms)) {
      $batch = [
        'title' => t('Updating Full Name and Data for Term Children'),
        'init_message' => t('Querying term children.'),
        'operations' => [],
      ];

      foreach ($child_terms as $child_term) {
        $batch['operations'][] = [
          [
            $child_term,
            'save',
          ],
          [],
        ];
      }

      batch_set($batch);
    }
  }
}

/**
 * Rebuilds all taxonomy terms in specimen vocabulary.
 */
function _herbarium_core_rebuild_specimen_taxonomy_terms() {
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadTree(HERBARIUM_CORE_SPECIMEN_VOCABULARY_ID);

  if (!empty($terms)) {
    foreach ($terms as $term) {
      $term_obj = Term::load($term->tid);
      $term_obj->save();
    }
  }
}

/**
 * Build the full name representation for a specimen taxonomy term.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to build.
 * @param string[] $omit_ranks
 *   An array of taxon rank names to omit.
 * @param bool $style_html
 *   TRUE if the output should be styled with HTML tags. FALSE otherwise.
 *
 * @return string
 *   The full name representation for the specimen taxonomy term.
 */
function _herbarium_core_term_build_full_name(TermInterface $term, array $omit_ranks = [], $style_html = TRUE) {
  $full_name = [];
  $ancestors = _herbarium_core_term_get_ancestors($term, $omit_ranks);

  foreach ($ancestors as $ancestor) {
    // Label.
    if (
    in_array(
      $ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName(),
      HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_LABELS_TO_PRINT
    )
    ) {
      $full_name[] = $ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName();
    }

    // Name.
    if ($style_html) {
      $full_name[] = '<em>' . $ancestor->getName() . '</em>';
    }
    else {
      $full_name[] = $ancestor->getName();
    }

    // Authority.
    if (!empty($ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_AUTH_FIELD)
      ->getString())
    ) {
      $full_name[] = $ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_AUTH_FIELD)
        ->getString();
    }
  }

  return implode(' ', $full_name);
}

/**
 * Build the infraspecific species name representation for a specimen term.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to build.
 * @param bool $style_html
 *   TRUE if the output should be styled with HTML tags. FALSE otherwise.
 *
 * @return string
 *   The  infraspecific species name for the specimen term.
 */
function _herbarium_core_term_build_infraspecific_name(TermInterface $term, $style_html = TRUE) {
  $infraspecific_name = [];

  if (!in_array(
      $term->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName(),
        HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_INFRASPECIFIC
    )
  ) {
    $ancestors = _herbarium_core_term_get_ancestors($term, HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_INFRASPECIFIC);
    foreach ($ancestors as $ancestor) {
      // Label.
      $infraspecific_name[] = $ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName();

      // Name.
      if ($style_html) {
        $infraspecific_name[] = '<em>' . $ancestor->getName() . '</em>';
      }
      else {
        $infraspecific_name[] = $ancestor->getName();
      }

      // Authority.
      if (!empty($ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_AUTH_FIELD)->getString())) {
        $infraspecific_name[] = $ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_AUTH_FIELD)->getString();
      }
    }
  }

  return implode(' ', $infraspecific_name);
}

/**
 * Returns the ancestors of a taxonomy term, with an optional upper limit.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 * @param string[] $omit_ranks
 *   An array of taxon rank names to omit.
 *
 * @return \Drupal\taxonomy\TermInterface[]
 *   An array of ancestors.
 */
function _herbarium_core_term_get_ancestors(TermInterface $term, array $omit_ranks = []) {
  $parents = [$term];
  $parent = _herbarium_core_term_get_first_parent($term);

  while ($parent !== FALSE) {
    if (!in_array($parent->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName(), $omit_ranks)) {
      $parents[] = $parent;
    }
    $parent = _herbarium_core_term_get_first_parent($parent);
  }
  return array_reverse($parents);
}

/**
 * Returns the first parent of a given taxonomy term.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 *
 * @return mixed
 *   The first parent term, FALSE if no parents.
 */
function _herbarium_core_term_get_first_parent(TermInterface $term) {
  $storage = \Drupal::service('entity_type.manager')->getStorage('taxonomy_term');
  /* @var $storage \Drupal\taxonomy\TermStorageInterface */

  $parent_terms = $storage->loadParents($term->id());
  if (!empty($parent_terms)) {
    return array_shift($parent_terms);
  }
  return FALSE;
}

/**
 * Returns the ancestor of the term with a specific rank.
 *
 * @param \Drupal\taxonomy\TermInterface $term
 *   The term to query.
 * @param string $rank_to_return
 *   The rank of the ancestor to return.
 *
 * @return mixed
 *   The term corresponding to rank_to_return, FALSE if none found.
 */
function _herbarium_core_term_get_ancestor_rank(TermInterface $term, $rank_to_return = 'Species') {
  $ancestors = _herbarium_core_term_get_ancestors($term);

  foreach ($ancestors as $ancestor) {
    if ($ancestor->get(HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANK_FIELD)->entity->getName() == $rank_to_return) {
      return $ancestor;
    }
  }

  return FALSE;
}
