<?php

/**
 * @file
 * Add style to feature pages.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_node_delete().
 */
function herbarium_specimen_node_delete(EntityInterface $node) {
  if ($node->getType() == 'herbarium_specimen') {
    // Remove DZI tiles for this image.
    batch_set(
      [
        'title' => t('Removing Surrogate Images'),
        'init_message' => t('Removing Herbarium Specimen Surrogate Images'),
        'operations' => [
          [
            [
              'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
              'deleteExistingAssets',
            ],
            [
              NULL,
              $node->nid->value,
              FALSE,
            ],
          ],
        ],
      ]
    );
    batch_process();
    \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', \Drupal::url('view.browse.page'));
  }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function herbarium_specimen_preprocess_views_exposed_form(&$variables) {
  $variables['#attached']['library'][] = 'herbarium_specimen/views-form';
}

/**
 * Build batch operations array for specimen surrogates from an archival master.
 *
 * @param object $nid
 *   The node id of the parent herbarium_specimen node.
 * @param string $file_path
 *   The file path of the archival master TIFF File object.
 *
 * @return array
 *   A batch API operations array to generate the required surrogates.
 */
function _herbarium_specimen_generate_specimen_surrogates_batch($nid, $file_path) {

  return array(
    'title' => t('Generating Herbarium Specimen Surrogate Images'),
    'init_message' => t('Generating Herbarium Specimen Surrogate Images'),
    'operations' => array(
      array(
        array(
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'deleteExistingAssets',
        ),
        array($nid),
      ),

      array(
        array(
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'buildJpgSurrogate',
        ),
        array($nid, $file_path),
      ),

      array(
        array(
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'buildMaskedJpgSurrogate',
        ),
        array($nid, $file_path),
      ),

      array(
        array(
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'buildDziTiles',
        ),
        array($nid, $file_path),
      ),
    ),
  );
}

/**
 * Manually remove the broken surrogate images from a herbarium specimen.
 *
 * @param object $nid
 *   The node id of the parent herbarium_specimen node.
 * @param string $field_name
 *   The field to remove the surrogates from. Fields:
 *    - field_large_sample_surrogate_msk
 *    - field_large_sample_surrogate
 *   are possible values.
 */
function _herbarium_specimen_manually_remove_broken_file_reference($nid, $field_name) {
  $query = db_select("node__$field_name", 'n');
  $query->fields('n', ["{$field_name}_target_id"]);
  $query->condition('n.entity_id', $nid);
  $result = $query->execute();

  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $fid = $row["{$field_name}_target_id"];

      $deleted = db_delete("node__$field_name")
        ->condition('entity_id', $nid)
        ->execute();

      $deleted = db_delete("node_revision__$field_name")
        ->condition('entity_id', $nid)
        ->execute();

      $deleted = db_delete('file_managed')
        ->condition('fid', $fid)
        ->execute();

      $deleted = db_delete('file_usage')
        ->condition('fid', $fid)
        ->execute();
    }
  }
}
