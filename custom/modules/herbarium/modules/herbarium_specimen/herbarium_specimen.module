<?php

/**
 * @file
 * Add style to feature pages.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_node_delete().
 */
function herbarium_specimen_node_delete(EntityInterface $node) {
  if ($node->getType() == 'herbarium_specimen') {
    // Remove DZI tiles for this image.
    batch_set(
      [
        'title' => t('Removing Surrogate Images'),
        'init_message' => t('Removing Herbarium Specimen Surrogate Images'),
        'operations' => [
          [
            [
              'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
              'deleteExistingAssets',
            ],
            [
              NULL,
              $node->nid->value,
              FALSE,
            ],
          ],
        ],
      ]
    );
    batch_process();
    \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', \Drupal::url('view.browse.page'));
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function herbarium_specimen_node_presave($node) {
  switch ($node->getType()) {
    case 'herbarium_specimen':
      $target_id = $node
        ->get('field_taxonomy_tid')
        ->get(0)
        ->get('target_id')
        ->getString();
      if (!empty($target_id)) {
        $term = Term::load($target_id);
        $full_title = _herbarium_core_term_build_full_name(
          $term,
          HERBARIUM_CORE_SPECIMEN_VOCABULARY_RANKS_TO_OMIT_PRINTING,
          FALSE
        );
      }

      // Populate the title field.
      $node->title = (empty($full_title)) ? 'Unknown' : $full_title;

      // Populate Additional Search Metadata from 'Text (plain, long)' fields.
      $metadata = '';
      $combine_fields = [
        'field_dwc_habitat',
        'field_dwc_eventremarks',
        'field_dwc_occurrenceremarks',
      ];
      foreach ($combine_fields as $field) {
        if ($node->hasField($field)) {
          $metadata .= trim(
              $node
                ->get($field)
                ->getString()
            ) .
            ' ';
        }
      }
      if (strlen($metadata) > 2048) {
        $metadata = substr($metadata, 0, 2048);
        drupal_set_message(
          'Search metadata field truncated. Some text may not be searchable!',
          'warning'
        );
      }
      $node
        ->get('field_additional_search_metadata')
        ->setValue(trim($metadata));

      break;
  }
}

/**
 * Implements hook_preprocess_views_exposed_form().
 */
function herbarium_specimen_preprocess_views_exposed_form(&$variables) {
  $variables['#attached']['library'][] = 'herbarium_specimen/views-form';
}

/**
 * Build batch operations array for specimen surrogates from an archival master.
 *
 * @param object $nid
 *   The node id of the parent herbarium_specimen node.
 * @param string $file_path
 *   The file path of the archival master TIFF File object.
 *
 * @return array
 *   A batch API operations array to generate the required surrogates.
 */
function _herbarium_specimen_generate_specimen_surrogates_batch($nid, $file_path) {

  return [
    'title' => t('Generating Herbarium Specimen Surrogate Images'),
    'init_message' => t('Generating Herbarium Specimen Surrogate Images'),
    'operations' => [
      [
        [
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'deleteExistingAssets',
        ],
        [$nid],
      ],

      [
        [
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'buildJpgSurrogate',
        ],
        [$nid, $file_path],
      ],

      [
        [
          'Drupal\herbarium_specimen\HerbariumImageSurrogateFactory',
          'buildDziTiles',
        ],
        [$nid, $file_path],
      ],
    ],
  ];
}

/**
 * Manually remove the broken surrogate images from a herbarium specimen.
 *
 * @param object $nid
 *   The node id of the parent herbarium_specimen node.
 * @param string $field_name
 *   The field to remove the surrogates from. Fields:
 *    - field_large_sample_surrogate
 *   are possible values.
 */
function _herbarium_specimen_manually_remove_broken_file_reference($nid, $field_name) {
  $query = db_select("node__$field_name", 'n');
  $query->fields('n', ["{$field_name}_target_id"]);
  $query->condition('n.entity_id', $nid);
  $result = $query->execute();

  if ($result) {
    while ($row = $result->fetchAssoc()) {
      $fid = $row["{$field_name}_target_id"];

      $deleted = db_delete("node__$field_name")
        ->condition('entity_id', $nid)
        ->execute();

      $deleted = db_delete("node_revision__$field_name")
        ->condition('entity_id', $nid)
        ->execute();

      $deleted = db_delete('file_managed')
        ->condition('fid', $fid)
        ->execute();

      $deleted = db_delete('file_usage')
        ->condition('fid', $fid)
        ->execute();
    }
  }
}

function _herbarium_specimen_has_local_images($node) {
  $surrogate_fields = [
    'field_large_sample_surrogate',
  ];

  foreach ($surrogate_fields as $surrogate_field) {
    if (!empty($node->get($surrogate_field)->entity)) {
      // Set field value as empty.
      return TRUE;
    }
  }

  return FALSE;
}
