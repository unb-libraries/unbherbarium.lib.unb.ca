<?php

/**
 * @file
 * Contains herbarium_core.module.
 */

use Drupal\Core\Link;
use Drupal\taxonomy\Entity\Term;

/**
 * Get migration destinations for a specific migration ID.
 *
 * @param string $id
 *   The migration ID.
 *
 * @return object
 *   The db query objects.
 */
function _herbarium_specimen_bulk_import_get_migration_destinations($id) {
  $table_name = "migrate_map_$id";
  return db_query("SELECT destid1 FROM $table_name}", [
    ':migrate_id' => $table_name,
  ]);
}

/**
 * Get the CMH coded migrations.
 *
 * @param string $migration_id
 *   The migration ID to match.
 * @param string $prefix
 *   The migration prefix to filter on.
 *
 * @return array
 *   An array of migration objects, keyed by migration ID.
 */
function _herbarium_specimen_bulk_import_get_cmh_migrations($migration_id = NULL, $prefix = 'cmh_') {
  $manager = \Drupal::service('plugin.manager.migration');
  $plugins = $manager->createInstances([]);
  $matched_migrations = [];

  // Get the requested migrations.
  foreach ($plugins as $id => $migration) {
    if (substr($id, 0, strlen($prefix)) === $prefix) {
      if (
        (!empty($migration_id) && $migration_id == $id) ||
        empty($migration_id)
      ) {
        $matched_migrations[$id] = $migration;
      }
    }
  }

  return $matched_migrations;
}

/**
 * Get the form elements for a list of migrations.
 *
 * @param string $migration_id
 *   The migration ID to match.
 * @param string $prefix
 *   The migration prefix to filter on.
 *
 * @return array
 *   A form API render array of the migration details.
 */
function _herbarium_specimen_bulk_import_get_cmh_migration_table($migration_id = NULL, $prefix = 'cmh_') {
  $previous_migrations = _herbarium_specimen_bulk_import_get_cmh_migrations($migration_id, $prefix);

  if (!empty($previous_migrations)) {
    // Construct header.
    $header = [
      t('ID'),
      t('Status'),
      t('Total'),
      t('Imported'),
      t('Errored'),
      t('Date'),
    ];
    // Build the rows.
    $rows = [];
    foreach ($previous_migrations as $migration) {
      $map = $migration->getIdMap();

      $imported = $map->importedCount();
      $source_plugin = $migration->getSourcePlugin();
      $migrate_last_imported_store = \Drupal::keyValue('migrate_last_imported');
      $last_imported = $migrate_last_imported_store->get($migration->id(), FALSE);

      $source_rows = $source_plugin->count();
      if ($source_rows == -1) {
        $source_rows = t('N/A');
        $unprocessed = t('N/A');
      }
      else {
        $unprocessed = $source_rows - $map->processedCount();
      }

      $imported_date = 'Never';
      if ($last_imported != 0) {
        $imported_date = date("Y-m-d H:i:s", (int) substr($last_imported, 0, 10));
      }

      $rows[] = [
        'data' => [
          Link::createFromRoute($migration->id(), 'herbarium_specimen_bulk_import.view', ['migration_id' => $migration->id()]),
          $migration->getStatusLabel(),
          $source_rows,
          $imported,
          $unprocessed,
          $imported_date,
        ],
      ];
    }
    $form['history_table'] = [
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    ];
    $form['pager'] = [
      '#type' => 'pager',
    ];
  }
  else {
    $form['none_found'] = [
      '#markup' => t('No imports have been performed yet.'),
    ];
  }
  return $form;
}

/**
 * Get the list of import formats.
 *
 * @TODO This would be much cleaner as configuration.
 *
 * @return array
 *   An array of formats available to the user with details.
 */
function _herbarium_specimen_bulk_import_get_import_formats() {
  return [
    [
      'id' => 'cmh_herb_import_standard',
      'description' => 'Standard, All Columns',
      'columns' => [

        [
          'name' => 'CMH Accession ID',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Species ID',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_term_reference',
              'args' => [
                'vid' => 'herbarium_specimen_taxonomy',
              ],
              'error' => t('is not a valid species ID'),
            ],
          ],
        ],

        [
          'name' => 'Collector(s)',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Country',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Province/State',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'County',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Verbatim Locality',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Latitude',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_latitude',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for latitude. Please use a value between -90 and 90'),
            ],
          ],
        ],

        [
          'name' => 'Longitude',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_longitude',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for longitude. Please use a value between -180 and 180'),
            ],
          ],
        ],

        [
          'name' => 'Geo Precision',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_precision',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for precision. Please use a value between 1 and 5'),
            ],
          ],
        ],

        [
          'name' => 'Collection Year',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_year',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for year. Please use a value between 0 and this year'),
            ],
          ],
        ],

        [
          'name' => 'Collection Month',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_month',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for the month. Please use a value between 1 and 12'),
            ],
          ],
        ],

        [
          'name' => 'Collection Day',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_day',
              'args' => [
                'length' => 255,
              ],
              'error' => t('is not a valid value for the day. Please use a value between 1 and 31'),
            ],
          ],
        ],

        [
          'name' => 'Verbatim Event Date',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Abundance',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 2048,
              ],
              'error' => t('exceeds the maximum length of 2048 characters'),
            ],
          ],
        ],

        [
          'name' => 'Habitat',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 2048,
              ],
              'error' => t('exceeds the maximum length of 2048 characters'),
            ],
          ],
        ],

        [
          'name' => 'Occurrence Remarks',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 2048,
              ],
              'error' => t('exceeds the maximum length of 2048 characters'),
            ],
          ],
        ],

        [
          'name' => 'Other Catalogue No.',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Previous Identifications',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Reproductive Condition',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

        [
          'name' => 'Data Entry By',
          'validate' => [
            [
              'function' => '_herbarium_specimen_validate_string_length',
              'args' => [
                'length' => 255,
              ],
              'error' => t('exceeds the maximum length of 255 characters'),
            ],
          ],
        ],

      ],

      'validate' => [
        [
          'name' => 'Date',
          'function' => 'checkdate',
          'column_args' => [
            11,
            12,
            10,
          ],
          'error' => t('contains an invalid date in YMD columns'),
        ],
      ],

    ],
  ];
}

/**
 * Get an import format.
 *
 * @param string $format_id
 *   The format ID to return.
 *
 * @return array
 *   An import format array with details.
 */
function _herbarium_specimen_bulk_import_get_import_format($format_id) {
  foreach (_herbarium_specimen_bulk_import_get_import_formats() as $format) {
    if ($format['id'] == $format_id) {
      return $format;
    }
  }
  return [];
}

/**
 * Validate data to determine if this is a taxonomy term.
 *
 * @param string $tid
 *   The tid.
 * @param int $vid
 *   The vocabulary ID to filter on.
 *
 * @return bool
 *   TRUE if $data is a term in the $vid vocabulary. FALSE otherwise.
 */
function _herbarium_specimen_validate_term_reference($tid, $vid) {
  $term = Term::load(trim($tid));
  if (!empty($term) && $term->getVocabularyId() == $vid) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validate a string to a maximum length.
 *
 * @param string $data
 *   The string to validate.
 * @param int $length
 *   The maximum length.
 *
 * @return bool
 *   TRUE if the string is less than $length.
 */
function _herbarium_specimen_validate_string_length($data, $length) {
  if (strlen($data) <= $length) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validate a string as latitude.
 *
 * Taken from:
 * https://gist.github.com/arubacao/b5683b1dab4e4a47ee18fd55d9efbdd1
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid latitude value.
 */
function _herbarium_specimen_validate_latitude($data) {
  return preg_match('/^(\+|-)?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$/', $data);
}

/**
 * Validate a string as longitude.
 *
 * Taken from:
 * https://gist.github.com/arubacao/b5683b1dab4e4a47ee18fd55d9efbdd1
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid longitude value.
 */
function _herbarium_specimen_validate_longitude($data) {
  return preg_match('/^(\+|-)?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\.[0-9]{1,6})?))$/', $data);
}

/**
 * Validate a string as year.
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid year.
 */
function _herbarium_specimen_validate_year($data) {
  $data = (int) $data;
  if ($data >= 0 && $data <= date("Y")) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Validate a string as month.
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid month.
 */
function _herbarium_specimen_validate_month($data) {
  return filter_var(
    (int) $data,
    FILTER_VALIDATE_INT,
    [
      'options' => [
        'min_range' => 1,
        'max_range' => 12,
      ],
    ]
  );
}

/**
 * Validate a string as day.
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid day.
 */
function _herbarium_specimen_validate_day($data) {
  return filter_var(
    (int) $data,
    FILTER_VALIDATE_INT,
    [
      'options' => [
        'min_range' => 1,
        'max_range' => 31,
      ],
    ]
  );
}

/**
 * Validate a date.
 *
 * @param int $year
 *   The year to validate.
 * @param int $month
 *   The month to validate.
 * @param int $day
 *   The day to validate.
 *
 * @return bool
 *   TRUE if $data is a valid day.
 */
function _herbarium_specimen_validate_date($year, $month, $day) {
  return checkdate($month, $day, $year);
}

/**
 * Validate a string as an internal precision value.
 *
 * @param string $data
 *   The string to validate.
 *
 * @return bool
 *   TRUE if $data is a valid precision value.
 */
function _herbarium_specimen_validate_precision($data) {
  return filter_var(
    (int) $data,
    FILTER_VALIDATE_INT,
    [
      'options' => [
        'min_range' => 1,
        'max_range' => 5,
      ],
    ]
  );
}
